name: Release and Publish

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  pull-requests: read
  actions: read

jobs:
  test-before-release:
    name: Pre-Release Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage pytest pytest-cov

      - name: Run full test suite
        run: |
          echo "🧪 Running all 61 test cases before release..."
          python -m unittest discover tests -v

      - name: Run performance benchmarks
        run: |
          echo "🚀 Running performance benchmarks..."
          python performance_test.py

      - name: Validate package structure
        run: |
          echo "📦 Validating package structure..."
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from jsonQ import Query

          # Test basic functionality
          query = Query([{'test': 'data'}])
          assert len(query) == 1
          assert query.first()['test'] == 'data'

          print('✅ Package structure validated')
          "

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: test-before-release
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Build package
        run: |
          echo "🔨 Building package..."
          python -m build

      - name: Check package
        run: |
          echo "🔍 Checking package..."
          twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "🚀 Publishing to PyPI..."
          twine upload dist/*

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Generate documentation
        run: |
          echo "📚 Generating documentation..."

          # Update version badges in README
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s/version-[0-9.]*/version-$VERSION/g" README.md

          # Generate API documentation
          python -c "
          import sys
          sys.path.append('.')
          from src.jquery import Query
          import inspect

          print('📖 API Documentation Generated')
          print(f'   Methods documented: {len([m for m in dir(Query) if not m.startswith(\"_\")])}')
          print(f'   Version: $VERSION')
          "

      - name: Update badges
        run: |
          echo "🏷️ Updating badges..."
          # This would typically update documentation sites, wikis, etc.
          echo "✅ Documentation updated for release"

  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Wait for PyPI propagation
        run: |
          echo "⏳ Waiting for PyPI propagation..."
          sleep 300  # Wait 5 minutes

      - name: Test PyPI installation
        run: |
          echo "📦 Testing PyPI installation..."
          pip install jsonQ --upgrade
          python -c "
          from jsonQ import Query
          import json

          # Test basic functionality
          data = [{'name': 'test', 'value': 42}]
          query = Query(data)
          result = query.where('value > 40').tolist()

          assert len(result) == 1
          assert result[0]['name'] == 'test'

          print('✅ PyPI installation test passed')
          print(f'   Package working correctly')
          "

      - name: Notify success
        run: |
          echo "🎉 Release completed successfully!"
          echo "📦 Package published to PyPI"
          echo "📚 Documentation updated"
          echo "🏷️ GitHub release created"
          echo "✅ All validation tests passed"
