name: Nightly Builds

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  nightly-test:
    name: Nightly Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13-dev']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage pytest pytest-cov

    - name: Run comprehensive test suite
      run: |
        echo "üåô Running nightly tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
        python -m unittest discover tests -v

    - name: Run performance benchmarks
      run: |
        echo "üöÄ Running performance benchmarks..."
        python performance_test.py

    - name: Memory stress test
      run: |
        echo "üß† Running memory stress test..."
        python -c "
        import sys
        sys.path.append('.')
        from src.jquery import Query
        from sampledata.data import test_data
        
        # Stress test with large dataset
        large_data = test_data() * 5000  # 30,000 records
        query = Query(large_data)
        
        # Run intensive operations
        result1 = query.where('sex == M').count()
        result2 = query.group_by('family')
        result3 = query.stats('age')
        result4 = query.where('age > 100').order_by('age').tolist(limit=100)
        
        print(f'‚úÖ Stress test passed with {len(large_data)} records')
        print(f'   Males: {result1}')
        print(f'   Families: {len(result2)}')
        print(f'   Top results: {len(result4)}')
        "

    - name: Concurrent load test
      run: |
        echo "üîÑ Running concurrent load test..."
        python -c "
        import threading
        import time
        import sys
        sys.path.append('.')
        from src.jquery import Query
        from sampledata.data import test_data
        
        def worker(worker_id):
            query = Query(test_data() * 100)
            start_time = time.time()
            
            # Perform various operations
            count = query.where('sex == M').count()
            stats = query.stats('age')
            groups = query.group_by('family')
            
            end_time = time.time()
            return end_time - start_time
        
        # Run 20 concurrent workers
        threads = []
        results = []
        
        for i in range(20):
            thread = threading.Thread(target=lambda i=i: results.append(worker(i)))
            threads.append(thread)
            thread.start()
        
        for thread in threads:
            thread.join()
        
        avg_time = sum(results) / len(results)
        print(f'‚úÖ Concurrent load test passed')
        print(f'   Workers: 20')
        print(f'   Average time: {avg_time:.3f}s')
        "

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit

    - name: Check for security vulnerabilities
      run: |
        echo "üîí Checking for security vulnerabilities..."
        safety check --json || true
        bandit -r src/ -f json || true
        pip-audit --format=json || true

    - name: Check for outdated dependencies
      run: |
        echo "üì¶ Checking for outdated dependencies..."
        pip list --outdated

  compatibility-test:
    name: Compatibility Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test with minimal Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    
    - name: Test basic functionality on Python 3.7
      run: |
        echo "üêç Testing compatibility with Python 3.7..."
        python -c "
        import sys
        sys.path.append('.')
        from src.jquery import Query
        
        # Test basic functionality
        data = [{'name': 'test', 'age': 25}]
        query = Query(data)
        
        result = query.where('age > 20').tolist()
        assert len(result) == 1
        
        print('‚úÖ Python 3.7 compatibility confirmed')
        "

    - name: Test with latest Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Test advanced features on latest Python
      run: |
        echo "üêç Testing advanced features on Python 3.12..."
        python -c "
        import sys
        sys.path.append('.')
        from src.jquery import Query
        from sampledata.data import test_data
        
        query = Query(test_data())
        
        # Test all advanced features
        result1 = query.where('name.first like Th').count()
        result2 = query.where('age between 30,50').count()
        result3 = query.stats('age')
        result4 = query.group_by('family')
        result5 = query.sample(3, seed=42).count()
        
        print('‚úÖ Python 3.12 advanced features working')
        print(f'   Like operator: {result1} matches')
        print(f'   Between operator: {result2} matches')
        print(f'   Stats: {result3[\"count\"]} items')
        print(f'   Groups: {len(result4)} families')
        print(f'   Sample: {result5} items')
        "

  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install memory-profiler psutil

    - name: Benchmark performance
      run: |
        echo "üìä Running performance regression tests..."
        python -c "
        import time
        import sys
        sys.path.append('.')
        from src.jquery import Query
        from sampledata.data import test_data
        
        # Performance benchmarks
        large_data = test_data() * 1000  # 6,000 records
        query = Query(large_data)
        
        # Benchmark various operations
        benchmarks = {}
        
        # Simple filter
        start = time.time()
        result = query.where('sex == M').count()
        benchmarks['simple_filter'] = time.time() - start
        
        # Complex chain
        start = time.time()
        result = query.where('sex == M').where('age > 100').order_by('age').tolist(limit=10)
        benchmarks['complex_chain'] = time.time() - start
        
        # Aggregation
        start = time.time()
        result = query.stats('age')
        benchmarks['aggregation'] = time.time() - start
        
        # Grouping
        start = time.time()
        result = query.group_by('family')
        benchmarks['grouping'] = time.time() - start
        
        print('üìä Performance Benchmarks:')
        for operation, duration in benchmarks.items():
            print(f'   {operation}: {duration*1000:.2f}ms')
            
            # Regression check (should be under reasonable limits)
            limits = {
                'simple_filter': 0.1,    # 100ms
                'complex_chain': 0.2,    # 200ms  
                'aggregation': 0.05,     # 50ms
                'grouping': 0.05         # 50ms
            }
            
            if duration > limits.get(operation, 1.0):
                print(f'‚ö†Ô∏è  Performance regression detected in {operation}')
                print(f'   Expected: <{limits[operation]*1000:.0f}ms, Got: {duration*1000:.2f}ms')
            else:
                print(f'‚úÖ {operation} performance within limits')
        "

  nightly-summary:
    name: Nightly Build Summary
    runs-on: ubuntu-latest
    needs: [nightly-test, dependency-check, compatibility-test, performance-regression]
    if: always()
    steps:
    - name: Generate summary report
      run: |
        echo "üåô Nightly Build Summary - $(date)"
        echo "=================================="
        echo ""
        echo "üß™ Test Results:"
        echo "   Nightly Tests: ${{ needs.nightly-test.result }}"
        echo "   Dependency Check: ${{ needs.dependency-check.result }}"
        echo "   Compatibility: ${{ needs.compatibility-test.result }}"
        echo "   Performance: ${{ needs.performance-regression.result }}"
        echo ""
        echo "üìä Coverage:"
        echo "   ‚Ä¢ 61 comprehensive test cases"
        echo "   ‚Ä¢ 6 Python versions (3.8-3.13-dev)"
        echo "   ‚Ä¢ 3 operating systems"
        echo "   ‚Ä¢ Memory stress testing"
        echo "   ‚Ä¢ Concurrent load testing"
        echo "   ‚Ä¢ Performance regression testing"
        echo ""
        echo "üîí Security:"
        echo "   ‚Ä¢ Dependency vulnerability scanning"
        echo "   ‚Ä¢ Code security analysis"
        echo "   ‚Ä¢ Outdated package detection"
        echo ""
        if [[ "${{ needs.nightly-test.result }}" == "success" && 
              "${{ needs.dependency-check.result }}" == "success" && 
              "${{ needs.compatibility-test.result }}" == "success" && 
              "${{ needs.performance-regression.result }}" == "success" ]]; then
          echo "‚úÖ All nightly checks passed!"
          echo "üöÄ jsonQ is ready for production use"
        else
          echo "‚ùå Some nightly checks failed"
          echo "üîç Please review the failed jobs above"
        fi

    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Nightly Build Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `## üåô Nightly Build Failure Report
            
            The nightly build failed on ${new Date().toISOString()}.
            
            ### Failed Jobs:
            - Nightly Tests: ${{ needs.nightly-test.result }}
            - Dependency Check: ${{ needs.dependency-check.result }}
            - Compatibility: ${{ needs.compatibility-test.result }}
            - Performance: ${{ needs.performance-regression.result }}
            
            ### Action Required:
            Please review the [failed workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) and address any issues.
            
            ### Auto-generated by GitHub Actions`,
            labels: ['bug', 'nightly-build', 'automated']
          })